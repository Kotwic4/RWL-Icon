procedure main()
  while line:=read() do{
    line := copy(trim_white(line))
    #write(line)
    if correct(line) then{
      #write("line original length: ", *line)
      w:=map(Onp(line),"TF","10")
      w:=if *(w**&lcase) ~=0 then Reduce(w) else map(Val(w,''),"10","TF")
      write(w)
      #write("reduce line length: ", *w)
    }
  }
end

procedure Reduce(w)
  s := set()
  f := 0
  every v:=gen(*(w**&lcase)) do {
    val := Val(w,v)
    if val == 1 then insert(s,v)
    else f+:=1
  }
  if *s = 0 then return "F"
  if f = 0 then return "T"
  s2 := reduceSet(s)
  return evalueteSet(s1,s2)
end

procedure evalueteSet(s1,s2)
  w:=""
  every line:=!s2 do{
    write(line)
    if w ~== "" then w||:="|"
    i:=97
    temp := ""
    every e:=!line do{
      if e ~== '-' then {
        if temp ~== "" then temp||:="&"
        if e == "0" then temp||:="~"
        temp||:=char(i)
      }
      i+:=1
    }
    w||:=temp
  }
  return w
end

procedure connect(s1,s2)
	l:=0
	every i:=1 to *s1 do{
		if s1[i] ~== s2[i] then{
			s1[i]:="-"
			l+:=1
		}
	}
	if l=1 then return s1
end

procedure reduceSet(s)
	s2:=set()
	c:=0
	every v1:= !s do {
		b:=0
		every v2:=!s do
			if(insert(s2,connect(v1,v2))) then b:=c:=1
		if b=0 then insert(s2,v1)
	}
	return if c=1 then reduceSet(s2) else s2;
end

procedure Onp(w)
	while w?:= 2(="(",tab(bal(")")),pos(-1))
	every p := bal(">",,,w)
	if \p then return Onp(w[1:p])||Onp(w[p+1:0])||w[p]
	every p := bal(!'|&',,,w)
	if \p then return Onp(w[1:p])||Onp(w[p+1:0])||w[p]
  every p := bal('^',,,w)
	if \p then return Onp(w[1:p])||Onp(w[p+1:0])||w[p]
	if w[1]=="~" then return Onp(w[2:0]) || "~"
	return w;
end

procedure Val(w,arg)
	w:=map(w,cset(w)**&lcase,arg)
	s:=[]
	every el:=!w do
		if el==!"01" then push(s,el)
		else case el of {
			"&" : push(s, iand(pop(s),pop(s)))
			"|" : push(s, ior(pop(s),pop(s)))
			">" : push(s, ior(pop(s),1-pop(s)))
			"~" : push(s, 1-pop(s))
      "^" : push(s, ixor(pop(s),pop(s)))
		}
	return pop(s)
end

procedure gen(n)
	if n=0 then suspend ""
	else suspend !"01" || gen(n-1)
end


procedure trim_white(line)
  return if i:=find(' ',line )  then line[1:i] || trim_white(line[i+1:0])
                                else line
end

procedure correct(line)
  if line?{W()&pos(0)} then return
  else{
    write("ERROR")
    fail
  }
end

procedure W()
  suspend C() | (C() || =!"^|&>" || W())
end

procedure C()
	suspend =!(&lcase++'TF') | (="(" || W() || =")") | (="~" || C())
end
